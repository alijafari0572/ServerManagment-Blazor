@inject NavigationManager _NavigationManager;


<tr style="background-color:@GetBackGroundColor()">
    <td>@sr.Name </td>
    <td>@sr.City</td>

    <td style="color: @((sr.IsOnline ? "green" : "red"))">
        @(sr.IsOnline ? "online" : "offline")
    </td>
    <td>
        @if (sr.IsOnline)
        {
            Random random = new Random();
            int randomNumber = random.Next(0, 500);
            <text>@randomNumber</text>
        }
        else
        {
            <text>N/A</text>
        }
    </td>
    <td>
        <a href="/servers/@sr.Id" class="btn btn-link">Edit</a>
    </td>
    <td>
        @if (sr.IsOnline)
        {
            <button class="btn btn-outline-danger" type="button" @onclick="@(() => { sr.IsOnline = false; })">
                Turn Off
            </button>
        }
        else
        {
            <button class="btn btn-outline-success" type="button" @onclick="@(() => { sr.IsOnline = true; })">
                Turn On
            </button>
        }
    </td>
   
    <td>
        <EditForm Model="sr" FormName="@($"{sr.Id}")" OnValidSubmit="@(() => { DeleteServer(@sr.Id); })">
            <button class="btn btn-danger" type="submit">Delete</button>
        </EditForm>
    </td>
    @*     <div style="color: @(sr.IsOnline ? "green" : "red")">
        @sr.Name in the @sr.City @(sr.IsOnline ? "online" : "offline")
    </div> *@


</tr>
@code {

    [Parameter]
    public Server? sr { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    //private Server? server { get; set; } = new Server { Name = "S1", City = "Neghab" };
    private void DeleteServer(int id)
    {
        if (id != 0)
        {
            ServersRepository.DeleteServer(id);
            _NavigationManager.NavigateTo("/servers", true);
        }

    }

    private string GetBackGroundColor()
    {
        if (SelectedCity != null)
        {
            switch (SelectedCity)
            {
                case "Toronto": return "red";
                case "Montreal": return "blue";
                case "Ottawa": return "yellow";
                case "Calgary": return "green";
                case "Halifax": return "brown";
                default: return "withe";
            }

        }
        else
            return "withe";

    }
}
